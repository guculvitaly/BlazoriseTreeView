@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime


<!--main node-->
<li>

    <Icon Name="Item.CaretClass" Clicked="@(()=>OnClickNode(Item))"></Icon>
    <input type="checkbox" checked="@Item.IsChecked" class="check" value="@Item.NodeId" @oninput="(e)=> CheckboxChanged(e, Item)" id="@Item.NodeId" />

    <span>@Item.Text</span>

    @if (Item.Children != null && Item.Children.Any())
    {
        <ul class="@Level @Item.ShowOrHideUl">
            @foreach (var child in Item.Children)
            {
                <TreeComponent Item=@child Level="@(Level + 1)" FavoritesParentCallback="ChildNodesCallback" @key=child />
            }
        </ul>
    }
</li>

@code {
    [CascadingParameter] private List<Item> AllDataSource { get; set; }
    [Parameter] public Item Item { get; set; }
    [Parameter] public Item FavoriteNode { get; set; }
    [Parameter] public EventCallback<List<Item>> FavoritesNodesCallBack { get; set; }
    [Parameter] public EventCallback<Item> FavoritesParentCallback { get; set; }
    [Parameter] public int Level { get; set; }
    private IJSObjectReference _jsModule;

    protected List<string> LocalStorageSelectedIds = new List<string>();
    protected List<string> SelectedIds = new List<string>();
    List<string> SelectedValues { get; set; } = new();



    List<Item> FavoritesNodes = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        InitParentId();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Checked_Ids.js");
       // LocalStorageSelectedIds = await _jsModule.InvokeAsync<List<string>>("checkChange");
       // await localStorage.SetItemAsync("CheckedNodes_Main_Tree", LocalStorageSelectedIds);

    }
    private void InitParentId()
    {
        if(AllDataSource != null)
        foreach (var item in AllDataSource)
        {
            var childs = item.Children;
            if (childs != null && childs.Count > 0)
            {
                SetParentId(childs, item.NodeId);
            }
        }
    }
    private void SetParentId(List<Item> childs, string parentId)
    {
        foreach (var child in childs)
        {
            child.ParentId = parentId;
            if (childs != null && child.Children?.Count > 0)
            {
                SetParentId(child.Children, child.NodeId);
            }

        }

    }

    async void ChildNodesCallback(Item node)
    {
        await FavoritesParentCallback.InvokeAsync(node);
    }

    void OnClickNode(Item item)
    {
        item.ShowItem = !item.ShowItem;

    }

    private Item AddCheckedNodes(Item item, List<String> ids)
    {
        var child = new Item
            {
                NodeId = item.NodeId,
                ParentId = item.ParentId,
                Text = item.Text,
                IsChecked = true,
                Children = new(),
            };

        if (item.Children?.Count > 0)
        {

            foreach (var c in item.Children)
            {

                if (ids.Contains(c.NodeId))
                {
                    //c.IsChecked = true;
                    child.Children.Add(AddCheckedNodes(c, ids));
                }

            }
        }
        return child;
    }


    private async void CheckboxChanged(ChangeEventArgs e, Item node)
    {
        FavoritesNodes.Clear();
        //SelectedIds = await localStorage.GetItemAsync<List<string>>("CheckedNodes_Main_Tree");
        var value = e.Value;

        node.IsChecked = !node.IsChecked;

        if (node.IsInteracted && node.IsChecked) // if parent node checked
        {
            CheckAllNodes(node, node.IsChecked);
        }
        else
        {
            CheckAllNodes(node, node.IsChecked);

        }
        if ((bool)value) // if node is checked
        {
            await FavoritesParentCallback.InvokeAsync(node);

            //if (AllDataSource?.Count > 0)
            //{
            //    foreach (var item in AllDataSource)
            //    {
            //        if (SelectedIds.Contains(item.NodeId))
            //        {
            //            var _node = AddCheckedNodes(item, SelectedIds);
            //            FavoritesNodes.Add(_node);
            //            await FavoritesNodesCallBack.InvokeAsync(FavoritesNodes);


            //        }
            //    }

            //}
        }


    }

    async void CheckboxClicked(string nodeId, object checkedValue)
    {
        var ids = new List<Item>();
       

        if ((bool)checkedValue)
        {

            if (!SelectedValues.Contains(nodeId))
            {
                Console.WriteLine("Add node {0}", checkedValue);

                SelectedValues.Add(nodeId);
            }
        }
        else
        {

            if (SelectedValues.Contains(nodeId))
            {
                Console.WriteLine("Remove node {0}", checkedValue);
                SelectedValues.Remove(nodeId);
            }
        }


        //localStorage.SetItemAsync("CheckedNodes_Main_Tree", ids.SelectMany(f => f.NodeId));

        Console.WriteLine("CheckedNodes {0}", JsonSerializer.Serialize(SelectedValues));


    }

    /// <summary>
    /// Check or Uncheck all nodes
    /// </summary>
    /// <param name="item"></param>
    /// <param name="isChecked"></param>
    private async void CheckAllNodes(Item item, bool isChecked)
    {
        item.IsChecked = isChecked;
        if (item.Children?.Count() > 0)
        {
            foreach (var ch in item.Children)
            {

                CheckAllNodes(ch, isChecked);
            }
        }


        StateHasChanged();
    }
}
<style>
    ul {
        list-style: outside none none;
    }

    .hideChild {
        display: none;
    }
</style>