@page "/counter"
@using System.Text.Json


<PageTitle>Counter</PageTitle>

<ul level="0">
    @{
        @if (FavoritesNodes is not null)
        {
            @foreach (var item in FavoritesNodes)
            {
                var _key = "favorites_" + item;
                <BlazoriseTreeView.Components.FavoriteTree FavoriteItem="@item" Level=1 @key=item />
            }
        }

    }

</ul>

<CascadingValue Value="@AllDataSource">
    <ul level="0">
        @foreach (var item in Items)
        {
            var _key = "main_tree_" + item;
            <BlazoriseTreeView.Components.TreeComponent Item=@item FavoritesParentCallback="FavoriteCallbackNode" FavoritesNodesCallBack="_FavoritesNodesCallBack" Level=1 @key=item />
        }
    </ul>
</CascadingValue>




@code {
    public List<Item> AllDataSource { get; set; }
    private int currentCount = 0;
    private List<Item> FavoritesNodes { get; set; } = new List<Item>();
    private List<Item> ResultArray { get; set; } = new List<Item>();
    private Item FavoNodes { get; set; } = null;
    List<string> selectedNodes = new List<string>();
    IEnumerable<Item> Items;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Items = new[]
                                                {
        new Item { Text = "Item 1",  NodeId = "1" },
        new Item
        {
            Text = "Item 2",

            NodeId = "2",
            Children = new List<Item>
            {
                new Item { Text = "Item 2.1",   NodeId = "2.1",},
                new Item
                {
                    Text = "Item 2.2",

                    NodeId = "2.2",
                    Children = new List<Item>
                    {
                        new Item { Text = "Item 2.2.1",NodeId = "2.2.1", },
                        new Item { Text = "Item 2.2.2",NodeId = "2.2.2", },
                        new Item { Text = "Item 2.2.3", NodeId = "2.2.3", },
                        new Item { Text = "Item 2.2.4", NodeId = "2.2.4", },
                        new Item { Text = "Item 2.2.5", NodeId = "2.2.5", },
                        new Item { Text = "Item 2.2.6", NodeId = "2.2.6",
                                    Children = new List<Item>
                                    { new Item { Text = "Item 2.2.7",NodeId = "2.2.7", },

                                    }
                        },
                    }
                },
                new Item { Text = "Item 2.3",NodeId = "2.3" },
                new Item { Text = "Item 2.4",NodeId = "2.4" }
            }
        },
        new Item { Text = "Item 3",ParentId = null,NodeId = "3" },
    };

        AllDataSource = Items.ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    void _FavoritesNodesCallBack(List<Item> favNodes)
    {

        //FavoritesNodes = favNodes;
        StateHasChanged();
    }
    void FavoriteCallbackNode(Item node)
    {
        var result = new Item();
        var data = Items.ToList();
        var collection = new List<Item>();
        //FavoritesNodes.Clear();
        var ess = result.AddItemToCollection(data, node);
        if(ess != null)
        {
            collection.Add(ess);
            FavoritesNodes = FavoritesNodes.Union(collection).Distinct().ToList();
        }
        
        
        StateHasChanged();

    }



}
